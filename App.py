import streamlit as st
from streamlit_option_menu import option_menu
import pandas as pd
import plotly.express as px
selected = option_menu(
    "Menu",
    ["Acceuil", "EDA", "Pr√©diction"],
    icons=["house", "graph-up", "robot"],
    menu_icon="menu-app",
    default_index=0
    )
def Acceuil():
    st.markdown("""
                ## üéâ Bienvenue dans l‚Äôapplication de segmentation clients !

                Cette application a √©t√© d√©velopp√©e pour explorer, analyser et segmenter les clients d‚Äôune grande boutique gr√¢ce aux techniques de Data Science, de Machine Learning et de Traitement Automatique du Langage (NLP).

                ---

                ### üìå √Ä propos du projet
                - **Auteur** : Ange DAHOU, √©tudiant en Physique-Chimie et aspirant Data Scientist üß†

                - **Objectif** : Identifier des segments de clients et comprendre leurs comportements d‚Äôachat afin d‚Äôoptimiser les d√©cisions marketing üìä

                - **Technologies utilis√©es** : Python, Pandas, Scikit-learn, Matplotlib, Plotly Express, Streamlit üöÄ

                ---

                ### üìÇ √Ä propos du dataset

                - **Nom du dataset** : `data.csv`
                - **Nombre d‚Äôobservations** : `541909`
                - Informations transactionnelles (quantit√©, prix, date d‚Äôachat‚Ä¶)
                - Descriptions produits (texte en anglais, analys√© via NLP)

                > üîé Ce projet vous propose une navigation simple :  
                > - Analyse exploratoire (EDA)  
                > - Pr√©diction des clusters

                ---

                ### üìå Contexte et probl√©matique

                > Dans un march√© fortement concurrentiel, les entreprises doivent non seulement attirer de nouveaux clients, mais aussi fid√©liser ceux d√©j√† existants. Comprendre les profils de clients et les produits phares par segment devient donc crucial.

                Ce projet s‚Äôappuie sur :
                - L‚Äôanalyse exploratoire (EDA) pour identifier les tendances,
                - Le clustering pour regrouper les clients selon leurs comportements,
                - Le NLP pour analyser les descriptions produits et d√©tecter les articles les plus repr√©sentatifs de chaque cluster.

                ---

                ### ‚ùì Probl√©matique

                > Quels sont les diff√©rents profils de clients de la boutique, et quels produits phares caract√©risent chaque segment ?

                R√©pondre √† cette question permettra :
                - de mieux cibler les campagnes marketing,
                - de mettre en avant les bons produits aupr√®s des bons segments,
                - et d‚Äôam√©liorer la rentabilit√© en r√©duisant les actions inefficaces.

                ---
                ### üìå M√©thodologie  
                L‚Äôapproche suivie pour ce projet repose sur plusieurs √©tapes compl√©mentaires :  

                1. **Analyse exploratoire des donn√©es (EDA) üîç**  
                - √âtude des tendances d‚Äôachat par p√©riode, par continent et par produit.  
                - D√©tection des comportements r√©currents afin de mieux comprendre les clients.  

                2. **Segmentation par Clustering üìä**
                - Utilisation de l‚Äôalgorithme *KMeans* pour regrouper les clients selon leurs comportements d‚Äôachat.  
                - D√©termination du nombre optimal de clusters √† l‚Äôaide de m√©triques (m√©thode du coude, silhouette score).  

                3. **Analyse textuelle (NLP) üìù**  
                - Traitement des descriptions produits (en anglais).  
                - Identification des *produits phares repr√©sentatifs de chaque cluster*, afin de relier les profils clients aux articles achet√©s.  

                4. **Pr√©diction et Mod√©lisation ü§ñ** 
                - Mise en place de mod√®les supervis√©s avec *Scikit-learn*.  
                - Objectif : pr√©dire √† quel cluster appartient un nouveau client selon ses caract√©ristiques.¬†¬†
                ---
                ### üìå √Ä savoir
                Le dataset original contenait plus de 500.000 observations. Cependant, l‚Äôalgorithme KMeans n√©cessite une quantit√© de m√©moire tr√®s √©lev√©e (plus d'1 To de RAM) pour traiter l‚Äôensemble du jeu de donn√©es.
                Afin de rendre l‚Äôanalyse possible, un √©chantillonnage stratifi√© par continent a √©t√© r√©alis√©, r√©duisant ainsi le dataset √† 10 000 observations repr√©sentatives.

                ---

                ### üëâ Bon passage sur l‚Äôapplication et bonne exploration ! üöÄ
                """)

def EDA_page():
    st.markdown("""
                ## üîç Analyse exploratoire (EDA)

                Bienvenue dans la section EDA !  
                Ici, vous pouvez explorer les donn√©es brutes pour en d√©couvrir la structure, les tendances, les anomalies, et les insights essentiels.

                ---

                ### üß∞ Outils utilis√©s :
                - Statistiques descriptives
                - Visualisations interactives (matplotlib/seaborn)
                - Analyse des distributions, corr√©lations et valeurs manquantes

                > üéØ L‚Äôobjectif est de mieux **comprendre** les donn√©es avant d‚Äôentra√Æner un mod√®le pr√©dictif.
                ---
                """)
    @st.cache_data
    def load_data():
        df = pd.read_csv("data_clusters.csv")

        return df

    df = load_data()

    df1 = df.copy()
    dow_map = {
            0: 'Lundi',
            1: 'Mardi',
            2: 'Mercredi',
            3: 'Jeudi',
            4: 'Vendredi',
            5: 'Samedi',
            6: 'Dimanche'}

    df1['dow'] = df1['dow'].replace(dow_map)
    month_map = {
        0: 'Janvier',
        1: 'F√©vrier',
        2: 'Mars',
        3: 'Avril',
        4: 'Mai',
        5: 'Juin',
        6: 'Juillet',
        7: 'Ao√ªt',
        8: 'Septembre',
        9: 'Octobre',
        10: 'Novembre',
        11: 'D√©cembre',
        12: 'Janvier'}

    df1['month'] = df1['month'].replace(month_map)
    #with st.expander('Affichez le dataset'):
        #st.write(df1)
    boutton = st.sidebar.radio(
            "Option",
            ["Analyse visuelle", "Rapport"]
        )
    if boutton=="Analyse visuelle":
        EDA = st.sidebar.checkbox("Analyse de la Class", value= True)
        temps = st.sidebar.checkbox("Analyse Temporelle", value= True)
        region = st.sidebar.checkbox("Analyse G√©ographique", value= True)
        st.header("Analyse Exploratoire des Donn√©es (EDA)")
        if EDA:
            col1, col2 = st.columns(2)
            with col1:
                st.subheader('Repartition des observations par cluster')
                cluster_counts = df['clusters'].value_counts(normalize=True).reset_index()
                cluster_counts.columns = ['Cluster', 'Proportion']
                fig = px.pie(
                    cluster_counts,
                    values='Proportion',
                    names='Cluster',
                    title="R√©partition des observations par cluster ",
                    hole=0.3,  
                    color_discrete_sequence=px.colors.qualitative.Set3
                )

                fig.update_traces(
                    textinfo="percent+label",
                    textposition="inside"
                )

                fig.update_layout(
                    showlegend=True,
                    template="plotly_dark",
                    height=500,width=900
                )

                st.plotly_chart(fig, use_container_width=True)
                with col2:
                    st.subheader('D√©pense moyenne des clients par clusters')

                    cts = df.groupby('clusters')['PT'].mean().reset_index()

                    fig = px.pie(cts, 
                                names='clusters', 
                                values='PT', 
                                title="D√©pense moyenne par clusters",
                                color='clusters',      
                                template="plotly_dark",
                                hole=0.3)           

                    fig.update_traces(textposition='inside', textinfo='label+value')
                    fig.update_layout(height=500,width=900)

                    st.plotly_chart(fig, use_container_width=True)

        if temps:    
            col3, col4 = st.columns(2)
            with col3:
                st.subheader('Evolution des d√©penses totales des clients par mois')
                cts = df.groupby('month')['PT'].sum().reset_index()

                fig = px.line(cts,
                            x="month",
                            y="PT",
                            title="Depense total  par mois",
                            markers=True)

                fig.update_layout(xaxis_title="mois",
                                yaxis_title="Depense totale",
                                template="plotly_dark",  
                                height=500,width=900)
                
                st.plotly_chart(fig, use_container_width=True)

            with col4:
                st.subheader('Evolution des d√©penses totales des clients par jours')
                dow_users = df.groupby('dow')['PT'].sum().reset_index()

                fig = px.line(dow_users,
                            x="dow",
                            y="PT",
                            title="D√©penses totales des Clients par Jours",
                            markers=True)

                fig.update_layout(xaxis_title="Jours de la semaine",
                                yaxis_title="Depenses",
                                template="plotly_dark",
                                height=500,width=900)
                
                st.plotly_chart(fig, use_container_width=True)

            st.subheader('Evolution des d√©penses totales des Clients par Heure')
            hour_counts = df.groupby('heure')['PT'].sum().reset_index()

            fig = px.line(hour_counts,
                        x="heure",
                        y="PT",
                        title="D√©penses totales des Clients par Heure",
                        markers=True)

            fig.update_layout(xaxis_title="Heure de la journ√©e",
                            yaxis_title="Nombres de clients",
                            template="plotly_dark",  
                            height=500,width=700)
            st.plotly_chart(fig, use_container_width=True)
        if region:
            col7, col8 = st.columns(2)
            with col7:
            
                st.subheader('R√©partition des clusters par continent')
                ct = pd.crosstab(df['Continent'], df['clusters'], normalize='index') * 100
                continent_order = df['Continent'].value_counts().index
                ct = ct.loc[continent_order]

                ct_long = ct.reset_index().melt(id_vars='Continent', var_name='Cluster', value_name='Pourcentage')

                fig = px.bar(
                    ct_long,
                    x="Pourcentage",
                    y="Continent",
                    color="Cluster",
                    orientation="h",
                    title="R√©partition des clusters par continent (%)",
                    text="Pourcentage",
                    color_discrete_sequence=px.colors.qualitative.Set2
                )

                fig.update_traces(texttemplate='%{text:.1f}%', textposition="inside")
                fig.update_layout(
                    barmode="stack",  
                    xaxis_title="Pourcentage (%)",
                    yaxis_title="Continent",
                    template="plotly_white",
                    height=500,width=900
                )

                st.plotly_chart(fig, use_container_width=True)
                


            with col8:

                st.subheader('D√©penses totales moyenne par continent')
                cts = df.groupby('Continent')['PT'].mean().reset_index()

                fig = px.bar(
                    cts,
                    x="Continent",
                    y="PT",
                    text="PT",
                    orientation="v",
                    title="D√©penses totales moyenne par continent",
                    color="Continent",
                    color_discrete_sequence=px.colors.qualitative.Set2
                )

                fig.update_traces(texttemplate='%{text:.1f}', textposition="outside")
                fig.update_layout(
                    xaxis_title="Continent",
                    yaxis_title="D√©pense totale moyenne",
                    template="plotly_dark",  
                    height=500,
                    width=900,
                    showlegend=False
                )

                st.plotly_chart(fig, use_container_width=True)

            st.subheader('R√©partition des clusters par Mois')
            df['month'] = df['month'].astype(int)
            ct = pd.crosstab(df['month'], df['clusters'], normalize='index') * 100
            ct = ct.sort_index()  

            ct_long = ct.reset_index().melt(id_vars='month', var_name='Cluster', value_name='Pourcentage')

            fig = px.bar(
                ct_long,
                x="Pourcentage",
                y="month",
                color="Cluster",
                orientation="h",
                title="R√©partition des clusters par mois (%)",
                text="Pourcentage",
                color_discrete_sequence=px.colors.qualitative.Pastel
            )

            fig.update_traces(texttemplate='%{text:.1f}%', textposition="inside")
            fig.update_layout(
                barmode="stack",   
                xaxis_title="Pourcentage (%)",
                yaxis_title="Mois",
                template="plotly_white",
                height=600,width=900,
                yaxis=dict(dtick=1)  
            )
            st.plotly_chart(fig, use_container_width=True)
        
        
            
    elif boutton == "Rapport":
        rap_EDA = st.sidebar.checkbox("Rapport de l'EDA", value=True)
        rap_RFM = st.sidebar.checkbox("Rapport du RFM", value=True)
        if rap_EDA:
            st.markdown("""
            ## Rapport d‚ÄôAnalyse Client ‚Äì Clustering & Comportement d‚ÄôAchat

            
            Cette analyse se concentre sur le comportement d‚Äôachat des clients selon leur cluster. L‚Äôobjectif est d‚Äôidentifier les profils cl√©s, comprendre les habitudes d‚Äôachat, la saisonnalit√©, et les pr√©f√©rences produits. Ces informations permettront d‚Äôoptimiser le ciblage marketing, la gestion des stocks et la planification des campagnes.

            ### R√©partition des Clusters
            Les clients se r√©partissent de mani√®re h√©t√©rog√®ne entre les 4 clusters : 
                        
            ‚Ä¢   Cluster 0 repr√©sente 18,1%, 
                        
            ‚Ä¢   Cluster 1 repr√©sente 28,2%, 
                        
            ‚Ä¢   Cluster 2 repr√©sente 32,8%, et 
                        
            ‚Ä¢   Cluster 3 repr√©sente 20,8%.
        
            #### Insight 
                        
                Le Cluster 2 concentre la plus grande part de clients, tandis que le Cluster 0 reste le plus restreint. 
                Cette r√©partition montre que chaque cluster a un poids significatif et doit √™tre int√©gr√© dans la strat√©gie globale.


            

            ### R√©partition G√©ographique des Clusters
                Les clients proviennent de 5 zones : Asie, Oc√©anie, Europe, Am√©rique et unknown. 
                Tous les continents sont repr√©sent√©s dans les 4 clusters, √† l‚Äôexception de l‚ÄôAm√©rique, o√π aucun client n‚Äôappartient au Cluster 3.
            
            #### Insight 
                        
                Cette r√©partition g√©ographique √©quilibr√©e confirme la diversit√© du portefeuille client, mais l‚Äôabsence du Cluster 3 en Am√©rique peut signaler une opportunit√© de p√©n√©tration du march√© ou un d√©calage d‚Äôoffre produit.

            

            ### D√©penses par Cluster
            L‚Äôanalyse r√©v√®le que les clients du Cluster 0 et du Cluster 2 d√©pensent en moyenne 14‚Ç¨, ceux du Cluster 1 l√©g√®rement plus (16‚Ç¨), alors que le Cluster 3 se distingue nettement avec 36‚Ç¨ de d√©pense moyenne.
                        
            #### Insight
                        
                Malgr√© sa taille plus r√©duite, le Cluster 3 a un pouvoir d‚Äôachat largement sup√©rieur, ce qui en fait une cible prioritaire pour les offres premium ou √† forte valeur ajout√©e.

            
            ### Saisonnalit√© et Mois d‚ÄôAchat
            ‚Ä¢   Cluster 0 : Ach√®te sur les 5 derniers mois, contribuant de 19% √† 42% des ventes mensuelles.
                        
            ‚Ä¢	Cluster 1 : Ach√®te exclusivement sur les 6 premiers mois, repr√©sentant entre 52% et 89% des achats mensuels.
                        
            ‚Ä¢	Cluster 2 : Actif uniquement sur les 6 derniers mois, concentrant entre 47% et 58% des ventes mensuelles.
                        
            ‚Ä¢	Cluster 3 : Pr√©sent toute l‚Äôann√©e, avec une contribution allant de 10% √† 47%.

            #### Insight 
                        
                Le Cluster 3 est le plus r√©gulier, soutenant les ventes toute l‚Äôann√©e, alors que les autres clusters sont fortement li√©s √† des p√©riodes sp√©cifiques. 
                Cela sugg√®re de d√©velopper des campagnes diff√©renci√©es par saison : offres de d√©but d‚Äôann√©e pour le Cluster 1, promotions de fin d‚Äôann√©e pour les Clusters 0 et 2.

            
            ### Plages Horaires
            La boutique est ouverte de 6h √† 20h.
                        
            ‚Ä¢	Entre 6h et 9h, les ventes augmentent fortement, passant de 5‚Ç¨ √† 25 000‚Ç¨.
                        
            ‚Ä¢	De 9h √† 15h, le niveau reste stable, oscillant entre 20 000‚Ç¨ et 25 000‚Ç¨, avec des pics √† 9h et 15h.
                        
            ‚Ä¢	Entre 15h et 20h, les ventes d√©croissent progressivement jusqu‚Äô√† retomber √† 5‚Ç¨.

            #### Insight 
                        
                Les cr√©neaux 9h et 15h sont les moments cl√©s de la journ√©e. 
                Une intensification des actions commerciales (promotions, mise en avant de produits) sur ces heures pourrait maximiser les ventes.


            ### Analyse NLP ‚Äì Description des Produits
            ‚Ä¢	Cluster 0 : Les mots les plus fr√©quents sont set, bag, christmas, vintage, red, heart, retrospot, design, pink, cake.
                        
            ‚Üí Les clients de ce cluster sont particuli√®rement attir√©s par les articles festifs et saisonniers (Christmas, heart, red, vintage), associ√©s aux cadeaux de fin d‚Äôann√©e.
            
            ‚Ä¢	Cluster 1 : Les mots les plus fr√©quents sont bag, retrospot, red, set, pink, heart, design, blue, cake, white.
                        
            ‚Üí Ici, l‚Äôaccent est mis sur les accessoires color√©s et de design (bag, retrospot, pink, blue, white). Ces clients semblent sensibles au style et √† la vari√©t√© des articles plut√¥t qu‚Äô√† la saisonnalit√©.
                        
            ‚Ä¢	Cluster 2 : Les mots les plus fr√©quents sont set, bag, christmas, heart, red, vintage, retrospot, design, box, pink.
                        
            ‚Üí Ce cluster montre un panier d‚Äôachat mixte, combinant des produits festifs (Christmas, heart, vintage) et des articles pratiques (box, set, bag), sugg√©rant des achats r√©guliers mais aussi li√©s aux √©v√©nements.
                        
            ‚Ä¢	Cluster 3 : Les mots les plus fr√©quents sont bag, set, red, heart, retrospot, pink, vintage, design, jumbo, box.
                        
            ‚Üí Ce cluster met en avant des articles de grande taille ou utilitaires (jumbo, box), en plus des classiques (bag, set, red). Cela indique un int√©r√™t pour des articles plus fonctionnels et vari√©s, adapt√©s √† une consommation diversifi√©e.

            #### Insights
                        
                ‚Ä¢	Clusters 0 & 2 ‚Üí orient√©s festifs et cadeaux saisonniers, en lien avec No√´l et les √©v√©nements de fin d‚Äôann√©e.
                ‚Ä¢	Cluster 1 ‚Üí davantage centr√© sur les articles de design et mode, sensibles aux couleurs et aux tendances.
                ‚Ä¢	Cluster 3 ‚Üí profil plus utilitaire et vari√©, avec un attrait pour des produits de grande taille ou pratiques.
                        

            ### Conclusion & Recommandations
                ‚Ä¢	Le Cluster 3 se d√©marque par son d√©pense moyenne √©lev√©e (36‚Ç¨) et sa pr√©sence continue toute l‚Äôann√©e, ce qui en fait un segment strat√©gique.
                        
                ‚Ä¢	Les heures de pointe (9h & 15h) et les jours forts (mardi & jeudi) doivent √™tre renforc√©s par des promotions cibl√©es.
                        
                ‚Ä¢	La saisonnalit√© des clusters impose une segmentation des campagnes : d√©but d‚Äôann√©e pour Cluster 1, fin d‚Äôann√©e pour Clusters 0 et 2, toute l‚Äôann√©e pour Cluster 3.
                        
                ‚Ä¢	L‚Äôabsence de ventes le samedi est une limite op√©rationnelle √† reconsid√©rer.
                        
                ‚Ä¢	Une strat√©gie sp√©cifique pourrait √™tre d√©velopp√©e en Am√©rique pour introduire le Cluster 3.


            ## Opportunit√©s Marketing
                ‚Ä¢	Mettre en avant des promotions cibl√©es clusters en fonction des besoins des clients.
                ‚Ä¢	Adapter les stocks selon la saisonnalit√© et les clusters.
                ‚Ä¢	R√©√©valuer la gestion des horaires, notamment l‚Äôouverture le samedi.

            ---
            Cette analyse met en lumi√®re des informations strat√©giques pour mieux comprendre le comportement d‚Äôachat des clients et optimiser les performances commerciales. En exploitant ces r√©sultats, la boutique pourra affiner son ciblage marketing, adapter ses stocks en fonction de la saisonnalit√©, et personnaliser ses offres selon les pr√©f√©rences des diff√©rents clusters. Cette approche permettra non seulement d‚Äôaugmenter le chiffre d‚Äôaffaires, mais aussi d‚Äôam√©liorer l‚Äôexp√©rience client et de r√©duire les pertes li√©es √† une gestion inefficace des campagnes.
            
            """)

        if rap_RFM:
            st.header("Analyse du RFM (Recency, Frequency, Monetary)")
            st.markdown("""
            L'analyse RFM est une technique de segmentation des clients bas√©e sur trois dimensions cl√©s :
            
            - **R√©cence (Recency)** : Depuis combien de temps le client a-t-il effectu√© son dernier achat ?
            - **Fr√©quence (Frequency)** : √Ä quelle fr√©quence le client effectue-t-il des achats sur une p√©riode donn√©e ?
            - **Mon√©taire (Monetary)** : Quel est le montant total d√©pens√© par le client sur une p√©riode donn√©e ?
            
            En combinant ces trois dimensions, les entreprises peuvent identifier et segmenter leurs clients en fonction de leur comportement d'achat. Cela permet de cibler efficacement les campagnes marketing, d'am√©liorer la fid√©lisation des clients et d'optimiser les strat√©gies de vente.
            """)
            @st.cache_data
            def load_rfm():
                df_rfm = pd.read_csv("RFM.csv")
                return df_rfm
            
            df_rfm = load_rfm()
            with st.expander(f"Affichez le r√©sultat de l'analyse RFM"):
                st.write(df_rfm)

            st.markdown("""
            | *Cluster* | *Profil Client* | *Strat√©gie Marketing* |
            |-------------|------------------|--------------------------|
            | *0* | Clients *r√©cents* (Recency faible), *tr√®s actifs* (Frequency √©lev√©e), mais avec un *panier moyen mod√©r√©. Ce sont des acheteurs r√©guliers et fid√®les. | Fid√©liser avec un **programme de fid√©lit√©** (r√©ductions cumul√©es, points, cadeaux), et proposer des ventes crois√©es (cross-selling) pour augmenter le panier moyen. |
            | *1* | Clients *peu r√©cents* (longtemps inactifs), avec une *fr√©quence faible, mais un **panier moyen correct**. Ce sont des clients √† risque de **churn**. | Relancer avec des **campagnes de r√©activation** (emails personnalis√©s, offres exclusives, codes promo). Mettre en avant la *nouveaut√©* et les produits tendances pour susciter leur retour. |
            | *2* | Clients *r√©cents*, avec une **fr√©quence moyenne** et un panier l√©g√®rement sup√©rieur √† la moyenne. Ils sont actifs mais pas encore pleinement fid√®les. | Encourager la **r√©currence d‚Äôachat** avec des *ventes flash* ou des *abonnements*. Cr√©er une exp√©rience personnalis√©e (recommandations bas√©es sur achats pass√©s). |
            | *3* | Clients *interm√©diaires en r√©cence** (ni tr√®s r√©cents ni trop anciens), avec une *faible fr√©quence*, mais un **panier tr√®s √©lev√©**. Ce sont des **gros d√©pensiers occasionnels**. | Mettre en place une **strat√©gie premium/VIP** (acc√®s anticip√© aux nouveaut√©s, service personnalis√©). Offrir des avantages exclusifs pour les inciter √† acheter plus souvent. |
            """)


import joblib
def prediction():
    st.markdown("""
                ## ü§ñ Pr√©diction automatique

                Dans cette section, vous pouvez tester le **mod√®le pr√©dictif** entra√Æn√© sur notre dataset.

                ---

                ### ‚ú® Fonctionnalit√©s :
                - Saisissez les caract√©ristiques d‚Äôun individu ou d‚Äôun √©v√©nement
                - Obtenez une pr√©diction instantan√©e
                - Interpr√©tation des r√©sultats fournie

                > üì¢ Le mod√®le a √©t√© s√©lectionn√© pour sa **pr√©cision** et sa **robustesse**.
                ---
                ### üìù Renseigez les information svp
                """)
    @st.cache_resource
    def load_model():
        model = joblib.load("class_model.pkl")  
        return model

    model = load_model()



    # Entrer utilisateur 
    col1, col2, col3 = st.columns(3)

    col4, col5, col6 = st.columns(3)

    with col1:
        mois = st.selectbox(
            label=("Quelle est le mois d'achat de votre client"),
            options=['Janvier', 'F√©vrier', 'Mars', 'Avril', 'Mai',
                        'Juin', 'Juillet', 'Ao√ªt', 'Septembre', 'Octobre', 'Novembre', 'D√©cembre']
            )
        mois_map = {'Janvier' :0, 'F√©vrier':1, 'Mars':2, 'Avril':3, 'Mai':4,
                        'Juin':5, 'Juillet':6, 'Ao√ªt':7, 'Septembre':8, 'Octobre':9, 'Novembre':10, 'D√©cembre':11}
        mois_num = mois_map[mois]

    with col2:
        dow = st.selectbox(
            label="Quelle est le mois d'achat de votre client", 
            options=['Lundi', 'Mardi', 
                    'Mercredi', 'Jeudi', 
                    'Vendredi', 'Samedi', 'Dimanche']
                    )
        
        dow_mapping = {'Lundi':0, 'Mardi':1, 
                    'Mercredi':2, 'Jeudi':3, 
                    'Vendredi':4, 'Samedi':5, 'Dimanche':6}
        dow_num = dow_mapping[dow]

    with col3:
        PU = st.number_input(label=('Quelle est le Prix Unitaire du produit achet√©'), min_value=1, max_value=38970, value = 5)

    with col4:
        Quantite = st.number_input(label=('Quelle est la Quantit√© du produit achet√©'), min_value=1, max_value=80995, value = 10)

    with col5:
        heure = st.number_input(label=("Quelle est l'heure d'achat de votre client"), min_value=6, max_value=20, value = 13)

    with col6:
        Continent = st.selectbox(label="Quelle est le continent de votre client", options=['Europe', 'Unknown', 'Oceania', 'Asia', 'America'])

        Continent_mapping = {'Europe':0, 'Unknown':1, 'Oceania':2, 'Asia':3, 'America':4}

        Continent_num = Continent_mapping[Continent]
    PT = Quantite*PU
    def inference(Quantite, PU, heure, mois_num, dow_num, PT, Continent_num):
                  
        new_data = pd.DataFrame([[Quantite, PU, heure, mois_num, dow_num, PT, Continent_num]],
                            columns= ['Quantite', 'PU', 'heure', 'month', 'dow', 'PT', 'Continent'])
        pred = model.predict(new_data)[0]
        return pred
    
    if st.button('Lancez la pr√©diction'):
        prediction = inference(Quantite, PU, heure, mois_num, dow_num, PT, Continent_num)
        if prediction == 0:
            st.success(f"Notre mod√®le pr√©dit que le client fait partie du cluster 0")
            st.write("Les clients de ce cluster sont des acheteurs r√©guliers et fid√®les")
            st.write("Comme strategie marketing, il est conseill√© de fid√©liser avec un **programme de fid√©lit√©** (r√©ductions cumul√©es, points, cadeaux), et proposer des ventes crois√©es (cross-selling) pour augmenter le panier moyen")

        if prediction == 1:
            st.success(f"Notre mod√®le pr√©dit que le client fait partie du cluster 1")
            st.write("Les clients de ce cluster sont des clients √† risque de **churn**")
            st.write("Comme strategie marketing, il est conseill√© de relancer avec des **campagnes de r√©activation** (emails personnalis√©s, offres exclusives, codes promo). Mettre en avant la *nouveaut√©* et les produits tendances pour susciter leur retour. ")

        if prediction == 2:
            st.success(f"Notre mod√®le pr√©dit que le client fait partie du cluster 2")
            st.write("Les clients de ce cluster sont actifs mais pas encore pleinement fid√®les")
            st.write("Comme strategie marketing, il est conseill√© d'encourager la **r√©currence d‚Äôachat** avec des *ventes flash* ou des *abonnements*. Cr√©er une exp√©rience personnalis√©e (recommandations bas√©es sur achats pass√©s).")

        if prediction == 3:
            st.success(f"Notre mod√®le pr√©dit que le client fait partie du cluster 3")
            st.write("Les clients de ce cluster sont des **gros d√©pensiers occasionnels**.")
            st.write("Comme strategie marketing, il est conseill√© de mettre en place une **strat√©gie premium/VIP** (acc√®s anticip√© aux nouveaut√©s, service personnalis√©). Offrir des avantages exclusifs pour les inciter √† acheter plus souvent.")

if selected == "Acceuil":
    Acceuil()

if selected == "EDA":
    EDA_page()

if selected == "Pr√©diction":
    prediction()


